Try blooming with a separate filter step.  But first, compare performance on nvidia
  at work to see if our current layout is faster or slower.

Add a descriptor set for blur steps, where the blur parameters can be tweaked.
  In particular, let the filter function be dynamically adjusted, so that more
  and more stuff gets blurred, to the point where everything gets blurred (e.g.
  underwater or just-got-punched).

Threading: We know that our AMD card only has one graphics queue, so this setup will
  have to be an alternate code path.  See THREADING.txt

load_shader() - fix skipping of bad bytes (error instead)

Low priority:
  target_data.rs:
    Consider VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR,
    which allows use as a depth-stencil attachment where depth is read-only
    which is useful for shading phase - allows ImageUsage::Sampled along
    with ImageUsage::DepthStencilAttachment

  target_data.rs:
    Can the bloom images be half dimension?

  mesh.rs:
    texture images
    maybe uniform buffers
    maybe per-mesh vec4() values
