Exposure:
  Scene Brightness = Exposure * Scene Luminance
  Exposure = 1 / (1.2 * pow(2.0, log2(N*N/t * 100/s)))
    N = Aperture
    t = inverse of shutter speed
    S = ISO setting
  Histograms could be taken. I think a single number is enough.
  Compute scene luminance this way:
    Enable automatic mipmap generation. Sample the final 1x1 mipmap image.
    DONT pass it back to rust, that is too expensive. Just write it back to
      a uniform buffer where it can be used by subsequent shaders (if you need
      to pass it to another shader).
    You want the geometric mean of luminance (log average), not the arithmetic mean
      of color. You need to compute log2(luminance(color)) and then generate mipmaps
      from that. Then sample the 1x1 and do exp2(sample) for average luminance.
  Auto-adjust exposure by changing N, t and/or s.  Target is 18% Albedo.

Ocean
  Trochoid waves at varying frequencies

Suns
  The texture should have rays, and bloom should "blend" those rays, rather than
  having a pure circle with just a little bit of bloom.

UI layering needs sRGB gamma function applied (if that is applicable), but not
  tonemapping, so we need 1 more pass.

Try extending the depthbuffer (D32_SFloat) to put the far plane at 0 and
  the near plane at a large float (instead of 1). Then adjust our projection
  matrix to compensate accordingly.  This gives even MORE depth buffer
  precision.
  * NOTE that large float still needs to be divided by (f-n) then mujltipled by n and f,
    and that cannot overrun the max float.  And even that value gets mutiplied by Z
    (which goes up to the far plane), so that cant overrun either.

Try using an internal color format of YCbCr stored in R8B8G8A8 as follows:
  Cb is stored in B8
  Cr is stored in R8
  Y is stored in G8 and A8  (G8 + 256 * A8)
  This allows plenty of over-brightness, without resorting to R16B16G16A16 wastefulness.
  Also, luminance is separate and MUCH easier to work with.
  * NOTE there is no vulkan supported format for this. But it can still be done in the
    format mentioned above, manually.

Try adjusting Params (bloom/blur), see how it works.  I believe blur_level is not yet
  honored, so fix that.

Threading: We know that our AMD card only has one graphics queue, so this setup will
  have to be an alternate code path.  See THREADING.txt
  * We DONT need a separate queue - we can have several renderpasses that are not
    dependent on each other
  * Drivers optimize better within a renderpass than across them, so do that as much
    as we can - limitation is you cannot blur, you can only get to your same pixel.
  * Look into transient attachments

load_shader() - fix skipping of bad bytes (error instead)

Low priority:
  target_data.rs:
    Consider VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR,
    which allows use as a depth-stencil attachment where depth is read-only
    which is useful for shading phase - allows ImageUsage::Sampled along
    with ImageUsage::DepthStencilAttachment

  target_data.rs:
    Can the bloom images be half dimension?

  mesh.rs:
    texture images
    maybe uniform buffers
    maybe per-mesh vec4() values

  Allow unmapping (and remapping) of memory. Chunk could unmap if all blocks
    release some map-lock variable.
