
===============================================================================
Geometry Pass
-------------
All 3D geometry is rendered		-> DEPTH
					-> Diffuse g-buffer
                                        -> Normals g-buffer
                                        -> Material g-buffer

===============================================================================
Ambient Shading
---------------
Ambient level of shading is applied

  DEPTH ->                              -> Shading
  Diffuse g-buffer ->
  Normals g-buffer ->
  Material g-buffer ->

===============================================================================
Lighting
--------
For each light:

  Subpass: Geometry
  -----------------
  Geometry is rendered, depth only, from perspective of the light

                                        -> ShadowBuffer
  Subpass: Shading
  ----------------
  Shading is applied for all fragments that are illuminated

  ShadowBuffer ->                       -> Shading
  Diffuse g-buffer ->
  Normals g-buffer ->
  Material g-buffer ->

===============================================================================
Transparent & Far Plane
-----------------------
Transparent and far-plane graphics are rendered, and each is responsible for
its own shading.

  DEPTH ->                              -> Shading
  Diffuse g-buffer ->
  Normals g-buffer ->
  Material g-buffer ->

===============================================================================
Luminance Computation (outside of a renderpass)
---------------------
Luminance of each pixel is calculated to a target with auto mipmap generation
(vulkan has no auto-mipmap - use compute shader on 8x8 input blocks, do 3 levels at once)
Also look at 18.5 - image copies with scaling "vkCmdBlitImage()"

  Shading ->                            -> Luminance Target

  * Potentially we sample from a 2nd mip level of Shading, to a 1/4 size luminance
    target. The first mip level will be arithmetic mean of color (not quite luminance)
    but an error level we can live with.

===============================================================================
Blur-H
------
Pixels are filtered from shading, if hot enough (for bloom), and blured horizontally
(luminance value is needed here)

  Shading ->                            -> Blur Target

  * Potentially Shading can have auto-mipmap generation for 1 level only, and the
    the blur target can be only 1/4 size. This saves time and space, and is doubly
    used as we will want the mipmap for luminance.

===============================================================================
Blur-V
------
Pixels are sampled from Blur Target, blurred vertically and blended back

  Blur Target ->                        -> Shading

===============================================================================
Post
----
Shading is post-processed with exposure adjustment and tonemapping
(luminance value is needed here)

  Shading ->                            -> Swapchain Image

===============================================================================
UI
--
UI is composited/blended into swapchain image (alpha blending)

  UI ->                                 -> Swapchain Image


===============================================================================
=== GENERAL ARCHITECTURES ===============================

Forward Renderer:
-----------------

* Historic standard
* PASS1: Opaque -- render all opaque objects from front to back, including shading.
* PASS2: Transparent -- render all transparent objects from back to front.
* Draws and shades at it goes.  Shading is per-object.
* May shade same pixel multiple times.
* With many dynamic lights and many fragment-reshades, a lot of draw calls and
  CPU usage was required.

Deferred Renderer:
------------------

* Modern standard
* PASS1: Draw geometry data into G-Buffers
  * Need diffuse, specular, and normals (normalmap and geom normals can be
    packed into one RGBA8). Position can be reconstructed from z-buffer,
    gl_FragCoord, and screen resolution.
    (at full HD 1080p, requires 8.29 MB for each 32-bit g-buffer texture).
* PASS2: Shading as a post-process pass.
* Never shades a pixel more than once.
* Much fewer draw calls, especially with many lights, as it never shades a
  pixel more than once.
* Can incorporate shadows at same time.
* Requires a lot of graphics memory and memory bandwidth for the g-buffers.
* Has difficulties with transparency and sub-surface scattering.
* MSAA is not usable (although hacks like FXAA can suffice)
* Limited to one lighting model (for whole scene)

Early-Z Testing (Forward Renderer):
-----------------------------------

* PASS1: Early-Z -- render all objects, depth buffer only
* PASS2: Opaque --  render all opaque objects from front to back, including shading.
         Do not write to depth-buffer, only read it. Enable "early fragment testing".
* PASS3: Transparent --  render all transparent objects from back to front, including
         shading.  DO WRITE TO DEPTH BUFFER, so we can cross over transparent objects.
* Never shades a pixel more than once.
* Much less memory requirements than the deferred render.
* Lighting can still be done in a single-pass per fragment.
* Shaders are per-object, not one for the whole scene
* Must draw geometry twice: more CPU requirements.
* No issues with transparency, MSAA, etc.

Forward+ (tiled forward shading):
---------------------------------

* Early pass computes on a tile basis how many lights affect that tile.
* Then forward rendering is used, the lights computed for each fragment
  are only the ones mentioned in the tile ("light culling").
* Can handle 5,000-6,000 dynamic lights.
